pip install matplotlib


import random
import numpy as np
import matplotlib.pyplot as plt

# Step 1: Define cities as (x, y) coordinates
cities = [(random.randint(0, 100), random.randint(0, 100)) for _ in range(10)]  # 10 random cities

# Step 2: Calculate distance between two cities
def distance(city1, city2):
    return np.linalg.norm(np.array(city1) - np.array(city2))

# Step 3: Total path distance
def total_distance(path):
    return sum(distance(path[i], path[(i+1) % len(path)]) for i in range(len(path)))

# Step 4: Create initial population
def create_population(size):
    return [random.sample(cities, len(cities)) for _ in range(size)]

# Step 5: Crossover (Order Crossover)
def crossover(parent1, parent2):
    start, end = sorted(random.sample(range(len(parent1)), 2))
    child = [None]*len(parent1)
    child[start:end] = parent1[start:end]
    pointer = 0
    for city in parent2:
        if city not in child:
            while child[pointer] is not None:
                pointer += 1
            child[pointer] = city
    return child

# Step 6: Mutation (Swap two cities)
def mutate(path, rate=0.01):
    path = path[:]
    for i in range(len(path)):
        if random.random() < rate:
            j = random.randint(0, len(path)-1)
            path[i], path[j] = path[j], path[i]
    return path

# Step 7: Genetic Algorithm loop
def genetic_algorithm(generations=500, pop_size=100):
    population = create_population(pop_size)
    for generation in range(generations):
        population.sort(key=total_distance)
        next_gen = population[:10]  # Elitism: keep best 10
        while len(next_gen) < pop_size:
            parent1, parent2 = random.sample(population[:50], 2)
            child = crossover(parent1, parent2)
            child = mutate(child)
            next_gen.append(child)
        population = next_gen
    return population[0]

# Step 8: Run the GA
best_path = genetic_algorithm()

# Step 9: Print and plot result
print("Best path distance:", round(total_distance(best_path), 2))

# Plot the best path
x = [city[0] for city in best_path] + [best_path[0][0]]
y = [city[1] for city in best_path] + [best_path[0][1]]
plt.figure(figsize=(8, 6))
plt.plot(x, y, 'o-')
for i, (x_val, y_val) in enumerate(best_path):
    plt.text(x_val + 1, y_val + 1, str(i), fontsize=9)
plt.title("Best TSP Route Found by Genetic Algorithm")
plt.xlabel("X")
plt.ylabel("Y")
plt.grid(True)
plt.show()
